import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ChatMemberStatus
from aiogram.types import Message, CallbackQuery, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.markdown import hlink
import json
import hmac, hashlib, os
import aiohttp
import uvicorn
import asyncio
from fastapi import FastAPI, Request

load_dotenv()
# –¶–µ–Ω–∞ —Ç–µ–º–ø–ª–µ–π—Ç–∞
price_per_template = 100

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TOKEN = os.getenv("token_by_bot")
CHANNEL_USERNAME = "@mixbyvasilpapi"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

bot_app = FastAPI()

# üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception as e:
        return False


# /start
@router.message(F.text == "/start")
async def start(message: Message):

    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üî• –ó–∞–±—Ä–∞—Ç—å —á–µ–∫–ª–∏—Å—Ç")],
        [KeyboardButton(text="üíΩ –ö—É–ø–∏—Ç—å —Ç–µ–º–ø–ª–µ–π—Ç")],
        [KeyboardButton(text="üéö –ó–∞–∫–∞–∑–∞—Ç—å —Å–≤–µ–¥–æ—Å")]
    ])
    await message.answer(
        "üéô –°–∞–ª—é—Ç! \n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∞–ø–Ω—É—Ç—å –∑–≤—É–∫ –∏ –¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å.  \n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:",
        reply_markup=kb
    )


# üî• –ó–∞–±—Ä–∞—Ç—å —á–µ–∫–ª–∏—Å—Ç
@router.message(F.text == "üî• –ó–∞–±—Ä–∞—Ç—å —á–µ–∫–ª–∏—Å—Ç")
async def checklist(message: Message):
    text = (
        "üìò –ß–µ–∫–ª–∏—Å—Ç ‚Äú–ó–∞–ø–∏—à–∏ –∫–∞–∫ –Ω–∞–¥–æ‚Äù ‚Äî –º–∏–Ω–∏-–≥–∞–π–¥ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –∑–≤—É—á–∞—Ç—å –∏ –±—ã—Ç—å —É—Å–ª—ã—à–∞–Ω–Ω—ã–º.\n"
        "–°–æ–±—Ä–∞–Ω–æ –∏–∑ –æ–ø—ã—Ç–∞ 100+ –ø—Ä–æ–µ–∫—Ç–æ–≤. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞.\n"
        f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëâ {hlink('mixbyvasilpapi', 'https://t.me/mixbyvasilpapi')}\n"
        "–ü–æ—Ç–æ–º –Ω–∞–∂–º–∏ ‚Äú–ü–æ–ª—É—á–∏—Ç—å‚Äù –∏ –∑–∞–±–µ—Ä–∏ —Ñ–∞–π–ª.\n"
        "‚è≥ Telegram –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥."
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–ª—É—á–∏—Ç—å", callback_data="get_pdf")]
    ])

    await message.answer(text, reply_markup=markup)

# üíΩ –ö—É–ø–∏—Ç—å —Ç–µ–º–ø–ª–µ–π—Ç
@router.message(F.text == "üíΩ –ö—É–ø–∏—Ç—å —Ç–µ–º–ø–ª–µ–π—Ç")
async def buy_template(message: Message):
    text = (
        "üéõ –¢–µ–º–ø–ª–µ–π—Ç –æ—Ç HopOutSound\n"
        "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ—Å–µ—Ç. –≠—Ç–æ —Ü–µ–ª–∞—è —Å—Ö–µ–º–∞, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–ª–æ—Ç–Ω—ã–π, —Å–æ—á–Ω—ã–π –≤–æ–∫–∞–ª, –Ω–µ –ª–µ–∑—è –≤ –¥–µ–±—Ä–∏.\n"
        f"–¶–µ–Ω–∞: {price_per_template}‚ÇΩ\n"
        "üëá –ù–∞–∂–º–∏ ‚Äú–û–ø–ª–∞—Ç–∏—Ç—å‚Äù, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å."
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://t.me/tribute/app?startapp=dtub")]
    ])
    await message.answer(text, reply_markup=markup)



@bot_app.post("/send_pdf")
async def send_pdf(request: Request):
    data = await request.json()
    telegram_id = data.get("telegram_id")
    amount = data.get("amount")
    if not telegram_id:
        return {"error": "telegram_id missing"}
    try:
        if amount is not None and amount >= price_per_template:
            file = FSInputFile("files_for_money/test.txt")
            await bot.send_document(
                chat_id=telegram_id,
                document=file,
                caption=f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ!\n–í–æ—Ç, –ª–æ–≤–∏ —Ç–µ–º–ø–ª–µ–π—Ç!"
            )
            return {"status": "sent"}
        else:
            print("–ó–∞—à–µ–ª –≤ else")
            text = (
                f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ!\n"
                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–ª–µ–π—Ç–∞ –Ω—É–∂–Ω–æ {price_per_template}‚ÇΩ."
                if amount is not None else
                "–°–ø–∞—Å–∏–±–æ! –ù–µ –ø–æ–ª—É—á–∏–ª —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏ –º–Ω–µ."
            )
            await bot.send_message(chat_id=telegram_id, text=text)   # <-- –í–ê–ñ–ù–û
            return {"status": "thanks_only"}
    except Exception as e:
        return {"status": "error", "detail": str(e)}


# üéö –ó–∞–∫–∞–∑–∞—Ç—å —Å–≤–µ–¥–æ—Å
@router.message(F.text == "üéö –ó–∞–∫–∞–∑–∞—Ç—å —Å–≤–µ–¥–æ—Å")
async def order_mixing(message: Message):
    text = (
        "üéö –ó–∞–∫–∞–∑–∞—Ç—å —Å–≤–µ–¥–æ—Å\n"
        "–ó–¥–µ—Å—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –∑–≤—É–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å—Ç—ã–¥–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å.\n"
        "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ–±—Å—É–¥–∏–º –∑–∞–¥–∞—á—É, –ø–æ—Ç–æ–º –æ–ø–ª–∞—Ç–∞.\n"
        "üëá –ù–∞–∂–º–∏ ‚Äú–°–≤—è–∑–∞—Ç—å—Å—è‚Äù, –Ω–∞–ø–∏—à—É —Ç–µ–±–µ –ª–∏—á–Ω–æ."
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¨ –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/hopoutsound")]
    ])
    await message.answer(text, reply_markup=markup)


# ‚úÖ –ü–æ–ª—É—á–∏—Ç—å PDF
@router.callback_query(F.data == "get_pdf")
async def send_pdf(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    if await is_subscribed(user_id):
        try:
            pdf_file = FSInputFile("files_for_free/Test.pdf")
            await bot.send_document(chat_id, pdf_file, caption="üìò –õ–æ–≤–∏! –ó–∞–ø–∏—à–∏ –∫–∞–∫ –Ω–∞–¥–æ ‚Äî —Ç–≤–æ–π.")
        except Exception:
            await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
    else:
        await callback.answer("–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)


# üîÅ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":

    async def main():
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ FastAPI –≤–º–µ—Å—Ç–µ
        loop = asyncio.get_running_loop()
        loop.create_task(dp.start_polling(bot))

        config = uvicorn.Config(bot_app, host="0.0.0.0", port=8001, loop="asyncio")
        server = uvicorn.Server(config)
        await server.serve()

    asyncio.run(main())